blueprint:
  name: Action on Device Off Count (Advanced Time Control)
  description: >-
    At a specified time, this automation checks if a certain number or percentage of selected
    devices are off. If the condition is met, it runs an action.
    You can choose between a fixed time or a time relative to sunrise/sunset.
  domain: automation
  input:
    # --- TRIGGER CONTROLS ---
    trigger_mode:
      name: Trigger Type
      description: Choose how to trigger the automation.
      selector:
        select:
          options:
            - label: "At a specific time (Absolute)"
              value: "absolute"
            - label: "Relative to Sun (Sunrise/Sunset)"
              value: "relative"
      default: "absolute"

    trigger_time_absolute:
      name: Time (Absolute)
      description: Select the specific time of day to trigger.
      selector:
        time:
      default: "22:00:00"

    trigger_time_relative_event:
      name: Sun Event (Relative)
      description: Choose to trigger at sunrise or sunset.
      selector:
        select:
          options:
            - "sunrise"
            - "sunset"
      default: "sunset"

    trigger_time_relative_offset:
      name: Offset (Relative)
      description: "Set an offset from sunrise/sunset. Use negative for before. Examples: -00:45:00, 01:30:00"
      selector:
        text:
      default: "00:00:00"

    # --- DEVICE AND THRESHOLD CONTROLS ---
    lights_target:
      name: Lights to Monitor
      description: Select the light entities to monitor.
      selector:
        entity:
          domain: light
          multiple: true
      default: []
    switches_target:
      name: Switches to Monitor
      description: Select the switch entities to monitor.
      selector:
        entity:
          domain: switch
          multiple: true
      default: []
    threshold_type:
      name: Condition Type
      description: Choose whether to use a fixed number or a percentage for the condition.
      selector:
        select:
          options:
            - "Number"
            - "Percentage"
      default: "Number"
    threshold_number:
      name: Number of Devices Off
      description: (Used if Condition Type is 'Number') Run action when at least this many devices are off.
      selector:
        number:
          min: 1
          max: 100
          step: 1
      default: 1
    threshold_percentage:
      name: Percentage of Devices Off
      description: (Used if Condition Type is 'Percentage') Run action when at least this percentage of devices are off.
      selector:
        number:
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"
      default: 50

    # --- ACTION ---
    action_to_run:
      name: Actions
      description: The actions to run when the condition is met.
      selector:
        action:

# This section defines variables that will be used in the automation logic.
variables:
  # Load all necessary inputs into variables so they can be used in templates.
  trigger_mode: !input trigger_mode
  lights: !input lights_target
  switches: !input switches_target
  threshold_type: !input threshold_type
  threshold_number: !input threshold_number
  threshold_percentage: !input threshold_percentage

  # Combine the lists of lights and switches into one master list of entity IDs.
  all_entity_ids: "{{ lights + switches }}"

  # Count the total number of entities being monitored.
  total_entities: "{{ all_entity_ids | count }}"

  # Create a list containing only the entities that are currently 'off'.
  off_entities: "{{ all_entity_ids | select('is_state', 'off') | list }}"

  # Count how many entities are in the 'off' state.
  off_count: "{{ off_entities | count }}"

  # Calculate the required number of 'off' devices based on the selected condition type.
  required_off_count: >
    {% if threshold_type == 'Percentage' and total_entities > 0 %}
      {{ (total_entities * (threshold_percentage / 100)) | round(0, 'ceil') | int }}
    {% else %}
      {{ threshold_number | int }}
    {% endif %}

# Both triggers are defined here. We give them IDs so we can check which one fired.
trigger:
  - platform: time
    id: 'absolute'
    at: !input trigger_time_absolute
  - platform: sun
    id: 'relative'
    event: !input trigger_time_relative_event
    offset: !input trigger_time_relative_offset

# The condition block now has two parts.
condition:
  # 1. First, check if the trigger that fired (trigger.id) matches the mode selected by the user.
  #    We use the 'trigger_mode' variable defined above, which fixes the error.
  - condition: template
    value_template: "{{ trigger.id == trigger_mode }}"
  
  # 2. If the trigger was the correct one, then check the device count.
  - condition: template
    value_template: "{{ off_count >= required_off_count }}"

# This is the action that will be executed when the trigger and all conditions are met.
action: !input action_to_run

mode: single
